{
  "title": "React <3 Unity <3 Github Pages",
  "date": "2017-05-08T00:00:00.000Z",
  "bodyContent": "Recently I have been tinkering with React and really digging how easy it is to get up and running using the [Create React App](https://github.com/facebookincubator/create-react-app). What makes things even sweeter is how easily you can deploy to Github Pages to show off all of your work. I was able to even port my Unity game to a React app and deploy it to my site [here](https://shaneknows.github.io/Naifu)!\r\n\r\n### Alright you have my attention... how?\r\n\r\nWell first off download [Node.js](https://nodejs.org/en/download/) and install npm by opening up your command prompt (or use the terminal in Visual Studio Code) and running:\r\n```bash\r\nnpm install @npm -g\r\n```\r\nNow that you have npm installed. You will want to install the create-react-app npm package by running:\r\n```bash\r\nnpm install create-react-app -g\r\n```\r\nNavigate to the folder you wish to create your app and run:\r\n```bash\r\ncreate-react-app <name of project>\r\n```\r\nThis should take a little bit of time but by the time it finishes you will have a working react app you can toy around with. Make sure you switch to the working directory you just created and you can run the app\r\n```bash\r\ncd <your project name>\r\nnpm start\r\n```\r\n\r\n### Cool now how can I show this off?\r\n\r\nAssuming you have a [Github account](https://github.com/) it's quite easy. First create a repository for your current React application on Github. Now back in your project lets install github pages so we can generate and deploy the app as a static site for github pages.\r\n```bash\r\nnpm install --save-dev gh-pages\r\n```\r\nNow in your project's project.json we need to add a deploy option under the `scripts` section:\r\n```javascript\r\n\"deploy\":\"npm run build&&gh-pages -d build\"\r\n```\r\nThis will build our project and publish it to a `gh-pages` branch under your project.\r\n\r\nNow we are almost ready to deploy. First you will want to set your `homepage` in your project.json file. It should be updated and named `https://<username>.github.io/<projectname>`\r\n\r\nNow run \r\n```bash\r\nnpm run deploy\r\n``` \r\nto build and publish to the `gh-pages` branch of our repository. If there isn't a branch, it will be created. Now let's setup our project to enable GitHub Pages. Under the repository settings on Github, find the GitHub Pages section and set the `Source` to use the `gh-pages` branch via the dropdown list.\r\n\r\nNow again run\r\n```bash\r\nnpm run deploy\r\n```\r\nand you should be able to navigate to your homepage URL and find your working app!\r\n\r\n### Alright so now what about Unity?\r\n\r\nAlright so if you don't have a working Unity game feel free to fork mine [here](https://github.com/shaneknows/NaifuGame). Install the latest version of [Unity3d](https://unity3d.com/get-unity/download) and open the project. Select `File`->`Build and Run`. We want to build the project for WebGL so select that option and provide a Folder name. Once the process has complete you should see your game running in a web browser. If everything appears to be working fine, copy the files from the created folder and paste them in the `public` folder of your React application. This should override the default `index.html` file. Open up the `index.html` file and add `%PUBLIC_PATH%/` in front of the src tags so our file references will work locally and while deployed. Your file should look something like:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Unity WebGL Player | {game name}</title>\r\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/TemplateData/favicon.ico\">\r\n    <link rel=\"stylesheet\" href=\"%PUBLIC_URL%/TemplateData/style.css\">\r\n    <script src=\"%PUBLIC_URL%/TemplateData/UnityProgress.js\"></script>  \r\n    <script src=\"%PUBLIC_URL%/Build/UnityLoader.js\"></script>\r\n    <script>\r\n      var gameInstance = UnityLoader.instantiate(\"gameContainer\", \"%PUBLIC_URL%/Build/<game name>.json\", {onProgress: UnityProgress});\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div class=\"webgl-content\">\r\n      <div id=\"gameContainer\" style=\"width: 665px; height: 400px\"></div>\r\n      <div class=\"footer\">\r\n        <div class=\"webgl-logo\"></div>\r\n        <div class=\"fullscreen\" onclick=\"gameInstance.SetFullscreen(1)\"></div>\r\n        <div class=\"title\">{game name}</div>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nYou will also want to clear out the JSX (The HTML-like syntax found in the `render` function) rendered in the `App.js` file. Just return an empty div instead or you will get errors when running. You could also just completely comment out the `index.js` file if you don't intend on adding any react code. Now test your app by running `npm start`.\r\n\r\nIf everything seems to be working, run `npm run deploy` again and you should see your game running on your Github Pages site!\r\n\r\nHappy coding.",
  "bodyHtml": "<p>Recently I have been tinkering with React and really digging how easy it is to get up and running using the <a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>. What makes things even sweeter is how easily you can deploy to Github Pages to show off all of your work. I was able to even port my Unity game to a React app and deploy it to my site <a href=\"https://shaneknows.github.io/Naifu\">here</a>!</p>\n<h3>Alright you have my attention... how?</h3>\n<p>Well first off download <a href=\"https://nodejs.org/en/download/\">Node.js</a> and install npm by opening up your command prompt (or use the terminal in Visual Studio Code) and running:</p>\n<pre><code class=\"hljs\">npm install @npm -g</code></pre><p>Now that you have npm installed. You will want to install the create-react-app npm package by running:</p>\n<pre><code class=\"hljs\">npm install create-react-app -g</code></pre><p>Navigate to the folder you wish to create your app and run:</p>\n<pre><code class=\"hljs\">create-react-app &lt;name of project&gt;</code></pre><p>This should take a little bit of time but by the time it finishes you will have a working react app you can toy around with. Make sure you switch to the working directory you just created and you can run the app</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">cd</span> &lt;your project name&gt;\nnpm start</code></pre><h3>Cool now how can I show this off?</h3>\n<p>Assuming you have a <a href=\"https://github.com/\">Github account</a> it's quite easy. First create a repository for your current React application on Github. Now back in your project lets install github pages so we can generate and deploy the app as a static site for github pages.</p>\n<pre><code class=\"hljs\">npm install --save-dev gh-pages</code></pre><p>Now in your project's project.json we need to add a deploy option under the <code>scripts</code> section:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">\"deploy\"</span>:<span class=\"hljs-string\">\"npm run build&amp;&amp;gh-pages -d build\"</span></code></pre><p>This will build our project and publish it to a <code>gh-pages</code> branch under your project.</p>\n<p>Now we are almost ready to deploy. First you will want to set your <code>homepage</code> in your project.json file. It should be updated and named <code>https://&lt;username&gt;.github.io/&lt;projectname&gt;</code></p>\n<p>Now run</p>\n<pre><code class=\"hljs\">npm run deploy</code></pre><p>to build and publish to the <code>gh-pages</code> branch of our repository. If there isn't a branch, it will be created. Now let's setup our project to enable GitHub Pages. Under the repository settings on Github, find the GitHub Pages section and set the <code>Source</code> to use the <code>gh-pages</code> branch via the dropdown list.</p>\n<p>Now again run</p>\n<pre><code class=\"hljs\">npm run deploy</code></pre><p>and you should be able to navigate to your homepage URL and find your working app!</p>\n<h3>Alright so now what about Unity?</h3>\n<p>Alright so if you don't have a working Unity game feel free to fork mine <a href=\"https://github.com/shaneknows/NaifuGame\">here</a>. Install the latest version of <a href=\"https://unity3d.com/get-unity/download\">Unity3d</a> and open the project. Select <code>File</code>-&gt;<code>Build and Run</code>. We want to build the project for WebGL so select that option and provide a Folder name. Once the process has complete you should see your game running in a web browser. If everything appears to be working fine, copy the files from the created folder and paste them in the <code>public</code> folder of your React application. This should override the default <code>index.html</code> file. Open up the <code>index.html</code> file and add <code>%PUBLIC_PATH%/</code> in front of the src tags so our file references will work locally and while deployed. Your file should look something like:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en-us\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"Content-Type\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"text/html; charset=utf-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Unity WebGL Player | {game name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"shortcut icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/TemplateData/favicon.ico\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/TemplateData/style.css\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/TemplateData/UnityProgress.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>  \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/Build/UnityLoader.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n      <span class=\"hljs-keyword\">var</span> gameInstance = UnityLoader.instantiate(<span class=\"hljs-string\">\"gameContainer\"</span>, <span class=\"hljs-string\">\"%PUBLIC_URL%/Build/&lt;game name&gt;.json\"</span>, {onProgress: UnityProgress});\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"webgl-content\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"gameContainer\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 665px; height: 400px\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"footer\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"webgl-logo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fullscreen\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"gameInstance.SetFullscreen(1)\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>{game name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre><p>You will also want to clear out the JSX (The HTML-like syntax found in the <code>render</code> function) rendered in the <code>App.js</code> file. Just return an empty div instead or you will get errors when running. You could also just completely comment out the <code>index.js</code> file if you don't intend on adding any react code. Now test your app by running <code>npm start</code>.</p>\n<p>If everything seems to be working, run <code>npm run deploy</code> again and you should see your game running on your Github Pages site!</p>\n<p>Happy coding.</p>\n",
  "preview": "Recently I have been tinkering with React and really digging how easy it is to get up and running using the",
  "dir": "content",
  "base": "2017-5-8-ReactUnityGithubPages.json",
  "ext": ".json",
  "sourceBase": "2017-5-8-ReactUnityGithubPages.md",
  "sourceExt": ".md"
}